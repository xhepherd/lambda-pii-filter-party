const PII_PATTERN_FOR_PATHS=new RegExp("(/(setup/redirect|licenses)/)[^/?\\s]*","g"),PII_PATTERN_FOR_PARAMS=new RegExp("((password|password_confirmation|cc_no|ccv|authenticity_token|email|activation_code|code|token|first_name|last_name|address1|city|state|payerid|xv3v2ksky|credit_card|date|offer_code|auth_token|reset_password|reset_password_token|signup%255B\\w*\\%255D|signup%5B\\w*\\%5D|signup\\[\\w*\\])=)[^&\\s]*","g");function removePII(e){return removePIIFromPaths(removePIIFromParams(e))}function removePIIFromParams(e){return e.replace(PII_PATTERN_FOR_PARAMS,"$1[FILTERED]")}function removePIIFromPaths(e){return e.replace(PII_PATTERN_FOR_PATHS,"$1[FILTERED]")}exports.removePII=removePII;const AWS=require("aws-sdk"),zlib=require("zlib");let s3,logsObjectKey,logsBucket,logsBucketParams,filteredLogsObjectKey;function zipLogs(e){return zlib.gzipSync(e)}function unZipLogs(e){return zlib.gunzipSync(e).toString()}function processLogs(e){return zipLogs(removePII(unZipLogs(e)))}function formatKeyName(e){const t=process.env.FILTERED_LOGS_PREFIX,s=process.env.UNFILTERED_LOGS_PREFIX,o=new RegExp(`${s}(\\w*).(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2}).(\\w*.gz)`);return e.replace(o,`${t}year=$2/month=$3/day=$4/hour=$5/distribution=$1/$6`)}function getLogsObject(){return s3.getObject(logsBucketParams).promise()}function deleteLogsObject(){return s3.deleteObject(logsBucketParams).promise()}function putProcessedLogsObject(e,t){return s3.putObject({ContentType:"binary",ContentEncoding:"utf8",ServerSideEncryption:"aws:kms",SSEKMSKeyId:process.env.KMS_KEY_ID,Body:e,Key:t,Bucket:logsBucket}).promise()}function isLogsObjectProcessed(e){return s3.headObject({Key:e,Bucket:logsBucket}).promise()}exports.handler=function(e,t,s){return e.Records[0].s3.object?(s3=new AWS.S3,logsObjectKey=e.Records[0].s3.object.key,logsBucket=e.Records[0].s3.bucket.name,logsBucketParams={Key:logsObjectKey,Bucket:logsBucket},filteredLogsObjectKey=formatKeyName(logsObjectKey),getLogsObject().then(e=>putProcessedLogsObject(processLogs(e.Body),filteredLogsObjectKey)).then(()=>deleteLogsObject()).then(()=>s(null,"success")).catch(e=>{if(void 0!==e.statusCode&&403===e.statusCode)return isLogsObjectProcessed(filteredLogsObjectKey).then(()=>s(null,"DuplicateEvent")).catch(e=>s(`ERROR:${e.code}:AccessDenied:${filteredLogsObjectKey}`));s(`ERROR:${e.code}:${logsObjectKey}`)})):(s("Not an S3 object event","ERROR"),!1)};